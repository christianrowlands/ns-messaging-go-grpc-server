//*
// A protobuf definition of the 802.11 Beacon message defined in the Network Survey Messaging API.
//
// This protobuf definition is provided as a convenience only. See the official API documentation for the true 802.11
// Beacon message schema.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.26.1
// source: com/craxiom/messaging/wifi_beacon_record.proto

package messaging

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type WifiBeaconRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version     string                `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	MessageType string                `protobuf:"bytes,2,opt,name=messageType,proto3" json:"messageType,omitempty"`
	Data        *WifiBeaconRecordData `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *WifiBeaconRecord) Reset() {
	*x = WifiBeaconRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_craxiom_messaging_wifi_beacon_record_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WifiBeaconRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WifiBeaconRecord) ProtoMessage() {}

func (x *WifiBeaconRecord) ProtoReflect() protoreflect.Message {
	mi := &file_com_craxiom_messaging_wifi_beacon_record_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WifiBeaconRecord.ProtoReflect.Descriptor instead.
func (*WifiBeaconRecord) Descriptor() ([]byte, []int) {
	return file_com_craxiom_messaging_wifi_beacon_record_proto_rawDescGZIP(), []int{0}
}

func (x *WifiBeaconRecord) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *WifiBeaconRecord) GetMessageType() string {
	if x != nil {
		return x.MessageType
	}
	return ""
}

func (x *WifiBeaconRecord) GetData() *WifiBeaconRecordData {
	if x != nil {
		return x.Data
	}
	return nil
}

type WifiBeaconRecordData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceSerialNumber string  `protobuf:"bytes,1,opt,name=deviceSerialNumber,proto3" json:"deviceSerialNumber,omitempty"`
	DeviceName         string  `protobuf:"bytes,2,opt,name=deviceName,proto3" json:"deviceName,omitempty"`
	DeviceTime         string  `protobuf:"bytes,3,opt,name=deviceTime,proto3" json:"deviceTime,omitempty"`
	Latitude           float64 `protobuf:"fixed64,4,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Longitude          float64 `protobuf:"fixed64,5,opt,name=longitude,proto3" json:"longitude,omitempty"`
	Altitude           float32 `protobuf:"fixed32,6,opt,name=altitude,proto3" json:"altitude,omitempty"`
	MissionId          string  `protobuf:"bytes,7,opt,name=missionId,proto3" json:"missionId,omitempty"`
	RecordNumber       int32   `protobuf:"varint,8,opt,name=recordNumber,proto3" json:"recordNumber,omitempty"`
	Accuracy           int32   `protobuf:"varint,9,opt,name=accuracy,proto3" json:"accuracy,omitempty"`
	// Orientation of sensor and sensor parameters. optional.
	Heading                float32                `protobuf:"fixed32,50,opt,name=heading,proto3" json:"heading,omitempty"`
	Pitch                  float32                `protobuf:"fixed32,51,opt,name=pitch,proto3" json:"pitch,omitempty"`
	Roll                   float32                `protobuf:"fixed32,52,opt,name=roll,proto3" json:"roll,omitempty"`
	FieldOfView            float32                `protobuf:"fixed32,53,opt,name=fieldOfView,proto3" json:"fieldOfView,omitempty"`
	ReceiverSensitivity    float32                `protobuf:"fixed32,54,opt,name=receiverSensitivity,proto3" json:"receiverSensitivity,omitempty"`
	Speed                  float32                `protobuf:"fixed32,55,opt,name=speed,proto3" json:"speed,omitempty"`
	SourceAddress          string                 `protobuf:"bytes,10,opt,name=sourceAddress,proto3" json:"sourceAddress,omitempty"`
	DestinationAddress     string                 `protobuf:"bytes,11,opt,name=destinationAddress,proto3" json:"destinationAddress,omitempty"`
	Bssid                  string                 `protobuf:"bytes,12,opt,name=bssid,proto3" json:"bssid,omitempty"`
	BeaconInterval         *wrapperspb.Int32Value `protobuf:"bytes,13,opt,name=beaconInterval,proto3" json:"beaconInterval,omitempty"`
	ServiceSetType         ServiceSetType         `protobuf:"varint,14,opt,name=serviceSetType,proto3,enum=com.craxiom.messaging.wifi.serviceset.ServiceSetType" json:"serviceSetType,omitempty"`
	Ssid                   string                 `protobuf:"bytes,15,opt,name=ssid,proto3" json:"ssid,omitempty"`
	SupportedRates         string                 `protobuf:"bytes,16,opt,name=supportedRates,proto3" json:"supportedRates,omitempty"`
	ExtendedSupportedRates string                 `protobuf:"bytes,17,opt,name=extendedSupportedRates,proto3" json:"extendedSupportedRates,omitempty"`
	CipherSuites           []CipherSuite          `protobuf:"varint,18,rep,packed,name=cipherSuites,proto3,enum=com.craxiom.messaging.wifi.ciphersuite.CipherSuite" json:"cipherSuites,omitempty"`
	AkmSuites              []AkmSuite             `protobuf:"varint,19,rep,packed,name=akmSuites,proto3,enum=com.craxiom.messaging.wifi.akmsuite.AkmSuite" json:"akmSuites,omitempty"`
	EncryptionType         EncryptionType         `protobuf:"varint,20,opt,name=encryptionType,proto3,enum=com.craxiom.messaging.wifi.encryptiontype.EncryptionType" json:"encryptionType,omitempty"`
	Wps                    *wrapperspb.BoolValue  `protobuf:"bytes,21,opt,name=wps,proto3" json:"wps,omitempty"`
	Passpoint              *wrapperspb.BoolValue  `protobuf:"bytes,28,opt,name=passpoint,proto3" json:"passpoint,omitempty"`
	Bandwidth              WifiBandwidth          `protobuf:"varint,29,opt,name=bandwidth,proto3,enum=com.craxiom.messaging.wifi.bandwidth.WifiBandwidth" json:"bandwidth,omitempty"`
	Channel                *wrapperspb.Int32Value `protobuf:"bytes,22,opt,name=channel,proto3" json:"channel,omitempty"`
	FrequencyMhz           *wrapperspb.Int32Value `protobuf:"bytes,23,opt,name=frequencyMhz,proto3" json:"frequencyMhz,omitempty"`
	SignalStrength         *wrapperspb.FloatValue `protobuf:"bytes,24,opt,name=signalStrength,proto3" json:"signalStrength,omitempty"`
	Snr                    *wrapperspb.FloatValue `protobuf:"bytes,25,opt,name=snr,proto3" json:"snr,omitempty"`
	NodeType               NodeType               `protobuf:"varint,26,opt,name=nodeType,proto3,enum=com.craxiom.messaging.wifi.nodetype.NodeType" json:"nodeType,omitempty"`
	Standard               Standard               `protobuf:"varint,27,opt,name=standard,proto3,enum=com.craxiom.messaging.wifi.standard.Standard" json:"standard,omitempty"`
}

func (x *WifiBeaconRecordData) Reset() {
	*x = WifiBeaconRecordData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_craxiom_messaging_wifi_beacon_record_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WifiBeaconRecordData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WifiBeaconRecordData) ProtoMessage() {}

func (x *WifiBeaconRecordData) ProtoReflect() protoreflect.Message {
	mi := &file_com_craxiom_messaging_wifi_beacon_record_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WifiBeaconRecordData.ProtoReflect.Descriptor instead.
func (*WifiBeaconRecordData) Descriptor() ([]byte, []int) {
	return file_com_craxiom_messaging_wifi_beacon_record_proto_rawDescGZIP(), []int{1}
}

func (x *WifiBeaconRecordData) GetDeviceSerialNumber() string {
	if x != nil {
		return x.DeviceSerialNumber
	}
	return ""
}

func (x *WifiBeaconRecordData) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

func (x *WifiBeaconRecordData) GetDeviceTime() string {
	if x != nil {
		return x.DeviceTime
	}
	return ""
}

func (x *WifiBeaconRecordData) GetLatitude() float64 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *WifiBeaconRecordData) GetLongitude() float64 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

func (x *WifiBeaconRecordData) GetAltitude() float32 {
	if x != nil {
		return x.Altitude
	}
	return 0
}

func (x *WifiBeaconRecordData) GetMissionId() string {
	if x != nil {
		return x.MissionId
	}
	return ""
}

func (x *WifiBeaconRecordData) GetRecordNumber() int32 {
	if x != nil {
		return x.RecordNumber
	}
	return 0
}

func (x *WifiBeaconRecordData) GetAccuracy() int32 {
	if x != nil {
		return x.Accuracy
	}
	return 0
}

func (x *WifiBeaconRecordData) GetHeading() float32 {
	if x != nil {
		return x.Heading
	}
	return 0
}

func (x *WifiBeaconRecordData) GetPitch() float32 {
	if x != nil {
		return x.Pitch
	}
	return 0
}

func (x *WifiBeaconRecordData) GetRoll() float32 {
	if x != nil {
		return x.Roll
	}
	return 0
}

func (x *WifiBeaconRecordData) GetFieldOfView() float32 {
	if x != nil {
		return x.FieldOfView
	}
	return 0
}

func (x *WifiBeaconRecordData) GetReceiverSensitivity() float32 {
	if x != nil {
		return x.ReceiverSensitivity
	}
	return 0
}

func (x *WifiBeaconRecordData) GetSpeed() float32 {
	if x != nil {
		return x.Speed
	}
	return 0
}

func (x *WifiBeaconRecordData) GetSourceAddress() string {
	if x != nil {
		return x.SourceAddress
	}
	return ""
}

func (x *WifiBeaconRecordData) GetDestinationAddress() string {
	if x != nil {
		return x.DestinationAddress
	}
	return ""
}

func (x *WifiBeaconRecordData) GetBssid() string {
	if x != nil {
		return x.Bssid
	}
	return ""
}

func (x *WifiBeaconRecordData) GetBeaconInterval() *wrapperspb.Int32Value {
	if x != nil {
		return x.BeaconInterval
	}
	return nil
}

func (x *WifiBeaconRecordData) GetServiceSetType() ServiceSetType {
	if x != nil {
		return x.ServiceSetType
	}
	return ServiceSetType_UNKNOWN
}

func (x *WifiBeaconRecordData) GetSsid() string {
	if x != nil {
		return x.Ssid
	}
	return ""
}

func (x *WifiBeaconRecordData) GetSupportedRates() string {
	if x != nil {
		return x.SupportedRates
	}
	return ""
}

func (x *WifiBeaconRecordData) GetExtendedSupportedRates() string {
	if x != nil {
		return x.ExtendedSupportedRates
	}
	return ""
}

func (x *WifiBeaconRecordData) GetCipherSuites() []CipherSuite {
	if x != nil {
		return x.CipherSuites
	}
	return nil
}

func (x *WifiBeaconRecordData) GetAkmSuites() []AkmSuite {
	if x != nil {
		return x.AkmSuites
	}
	return nil
}

func (x *WifiBeaconRecordData) GetEncryptionType() EncryptionType {
	if x != nil {
		return x.EncryptionType
	}
	return EncryptionType_UNKNOWN
}

func (x *WifiBeaconRecordData) GetWps() *wrapperspb.BoolValue {
	if x != nil {
		return x.Wps
	}
	return nil
}

func (x *WifiBeaconRecordData) GetPasspoint() *wrapperspb.BoolValue {
	if x != nil {
		return x.Passpoint
	}
	return nil
}

func (x *WifiBeaconRecordData) GetBandwidth() WifiBandwidth {
	if x != nil {
		return x.Bandwidth
	}
	return WifiBandwidth_UNKNOWN
}

func (x *WifiBeaconRecordData) GetChannel() *wrapperspb.Int32Value {
	if x != nil {
		return x.Channel
	}
	return nil
}

func (x *WifiBeaconRecordData) GetFrequencyMhz() *wrapperspb.Int32Value {
	if x != nil {
		return x.FrequencyMhz
	}
	return nil
}

func (x *WifiBeaconRecordData) GetSignalStrength() *wrapperspb.FloatValue {
	if x != nil {
		return x.SignalStrength
	}
	return nil
}

func (x *WifiBeaconRecordData) GetSnr() *wrapperspb.FloatValue {
	if x != nil {
		return x.Snr
	}
	return nil
}

func (x *WifiBeaconRecordData) GetNodeType() NodeType {
	if x != nil {
		return x.NodeType
	}
	return NodeType_UNKNOWN
}

func (x *WifiBeaconRecordData) GetStandard() Standard {
	if x != nil {
		return x.Standard
	}
	return Standard_UNKNOWN
}

var File_com_craxiom_messaging_wifi_beacon_record_proto protoreflect.FileDescriptor

var file_com_craxiom_messaging_wifi_beacon_record_proto_rawDesc = []byte{
	0x0a, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x72, 0x61, 0x78, 0x69, 0x6f, 0x6d, 0x2f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2f, 0x77, 0x69, 0x66, 0x69, 0x5f, 0x62, 0x65, 0x61,
	0x63, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x15, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x72, 0x61, 0x78, 0x69, 0x6f, 0x6d, 0x2e, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x37, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x72, 0x61,
	0x78, 0x69, 0x6f, 0x6d, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2f, 0x77,
	0x69, 0x66, 0x69, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x65, 0x74, 0x2f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x39, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x72, 0x61, 0x78, 0x69, 0x6f, 0x6d, 0x2f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2f, 0x77, 0x69, 0x66, 0x69, 0x2f, 0x63, 0x69, 0x70,
	0x68, 0x65, 0x72, 0x73, 0x75, 0x69, 0x74, 0x65, 0x2f, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x5f,
	0x73, 0x75, 0x69, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x33, 0x63, 0x6f, 0x6d,
	0x2f, 0x63, 0x72, 0x61, 0x78, 0x69, 0x6f, 0x6d, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69,
	0x6e, 0x67, 0x2f, 0x77, 0x69, 0x66, 0x69, 0x2f, 0x61, 0x6b, 0x6d, 0x73, 0x75, 0x69, 0x74, 0x65,
	0x2f, 0x61, 0x6b, 0x6d, 0x5f, 0x73, 0x75, 0x69, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x3f, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x72, 0x61, 0x78, 0x69, 0x6f, 0x6d, 0x2f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2f, 0x77, 0x69, 0x66, 0x69, 0x2f, 0x65, 0x6e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x65, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x33, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x72, 0x61, 0x78, 0x69, 0x6f, 0x6d, 0x2f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2f, 0x77, 0x69, 0x66, 0x69, 0x2f, 0x6e, 0x6f,
	0x64, 0x65, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x32, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x72, 0x61, 0x78,
	0x69, 0x6f, 0x6d, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2f, 0x77, 0x69,
	0x66, 0x69, 0x2f, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x2f, 0x73, 0x74, 0x61, 0x6e,
	0x64, 0x61, 0x72, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x39, 0x63, 0x6f, 0x6d, 0x2f,
	0x63, 0x72, 0x61, 0x78, 0x69, 0x6f, 0x6d, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e,
	0x67, 0x2f, 0x77, 0x69, 0x66, 0x69, 0x2f, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68,
	0x2f, 0x77, 0x69, 0x66, 0x69, 0x5f, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8f, 0x01, 0x0a, 0x10, 0x57, 0x69, 0x66, 0x69, 0x42, 0x65,
	0x61, 0x63, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3f, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x72, 0x61, 0x78, 0x69,
	0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x57, 0x69, 0x66,
	0x69, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xb2, 0x0d, 0x0a, 0x14, 0x57, 0x69, 0x66, 0x69,
	0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x2e, 0x0a, 0x12, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x6c,
	0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x61, 0x6c,
	0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x63, 0x63, 0x75,
	0x72, 0x61, 0x63, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x61, 0x63, 0x63, 0x75,
	0x72, 0x61, 0x63, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x18,
	0x32, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x68, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x14,
	0x0a, 0x05, 0x70, 0x69, 0x74, 0x63, 0x68, 0x18, 0x33, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x70,
	0x69, 0x74, 0x63, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x6c, 0x18, 0x34, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x4f, 0x66, 0x56, 0x69, 0x65, 0x77, 0x18, 0x35, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x4f, 0x66, 0x56, 0x69, 0x65, 0x77, 0x12, 0x30, 0x0a, 0x13, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x53, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x18, 0x36, 0x20, 0x01, 0x28, 0x02, 0x52, 0x13, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x72, 0x53, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x37, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x73, 0x70, 0x65,
	0x65, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x64, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x73, 0x73, 0x69,
	0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x73, 0x73, 0x69, 0x64, 0x12, 0x43,
	0x0a, 0x0e, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0e, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x12, 0x5d, 0x0a, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x65,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x63, 0x72, 0x61, 0x78, 0x69, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x69, 0x6e, 0x67, 0x2e, 0x77, 0x69, 0x66, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x65, 0x74, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x65, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x65, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x73, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x73, 0x73, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x65, 0x64, 0x52, 0x61, 0x74, 0x65, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x52, 0x61, 0x74, 0x65, 0x73, 0x12, 0x36,
	0x0a, 0x16, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x65, 0x64, 0x52, 0x61, 0x74, 0x65, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65,
	0x64, 0x52, 0x61, 0x74, 0x65, 0x73, 0x12, 0x57, 0x0a, 0x0c, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72,
	0x53, 0x75, 0x69, 0x74, 0x65, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x63, 0x72, 0x61, 0x78, 0x69, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x69, 0x6e, 0x67, 0x2e, 0x77, 0x69, 0x66, 0x69, 0x2e, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72,
	0x73, 0x75, 0x69, 0x74, 0x65, 0x2e, 0x43, 0x69, 0x70, 0x68, 0x65, 0x72, 0x53, 0x75, 0x69, 0x74,
	0x65, 0x52, 0x0c, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x53, 0x75, 0x69, 0x74, 0x65, 0x73, 0x12,
	0x4b, 0x0a, 0x09, 0x61, 0x6b, 0x6d, 0x53, 0x75, 0x69, 0x74, 0x65, 0x73, 0x18, 0x13, 0x20, 0x03,
	0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x72, 0x61, 0x78, 0x69, 0x6f, 0x6d,
	0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x77, 0x69, 0x66, 0x69, 0x2e,
	0x61, 0x6b, 0x6d, 0x73, 0x75, 0x69, 0x74, 0x65, 0x2e, 0x41, 0x6b, 0x6d, 0x53, 0x75, 0x69, 0x74,
	0x65, 0x52, 0x09, 0x61, 0x6b, 0x6d, 0x53, 0x75, 0x69, 0x74, 0x65, 0x73, 0x12, 0x61, 0x0a, 0x0e,
	0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x72, 0x61, 0x78, 0x69,
	0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x77, 0x69, 0x66,
	0x69, 0x2e, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0e, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x2c, 0x0a, 0x03, 0x77, 0x70, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x77, 0x70, 0x73, 0x12, 0x38, 0x0a,
	0x09, 0x70, 0x61, 0x73, 0x73, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x70, 0x61,
	0x73, 0x73, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x51, 0x0a, 0x09, 0x62, 0x61, 0x6e, 0x64, 0x77,
	0x69, 0x64, 0x74, 0x68, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x63, 0x72, 0x61, 0x78, 0x69, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69,
	0x6e, 0x67, 0x2e, 0x77, 0x69, 0x66, 0x69, 0x2e, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74,
	0x68, 0x2e, 0x57, 0x69, 0x66, 0x69, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x52,
	0x09, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x35, 0x0a, 0x07, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x12, 0x3f, 0x0a, 0x0c, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x4d, 0x68,
	0x7a, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x4d,
	0x68, 0x7a, 0x12, 0x43, 0x0a, 0x0e, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x72, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f,
	0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x53,
	0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x2d, 0x0a, 0x03, 0x73, 0x6e, 0x72, 0x18, 0x19,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x03, 0x73, 0x6e, 0x72, 0x12, 0x49, 0x0a, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63,
	0x72, 0x61, 0x78, 0x69, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67,
	0x2e, 0x77, 0x69, 0x66, 0x69, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x4e,
	0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x49, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x18, 0x1b, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x72, 0x61, 0x78, 0x69, 0x6f,
	0x6d, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x77, 0x69, 0x66, 0x69,
	0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x2e, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61,
	0x72, 0x64, 0x52, 0x08, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x42, 0x30, 0x0a, 0x15,
	0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x72, 0x61, 0x78, 0x69, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x69, 0x6e, 0x67, 0x50, 0x01, 0x5a, 0x15, 0x63, 0x72, 0x61, 0x78, 0x69, 0x6f, 0x6d,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_com_craxiom_messaging_wifi_beacon_record_proto_rawDescOnce sync.Once
	file_com_craxiom_messaging_wifi_beacon_record_proto_rawDescData = file_com_craxiom_messaging_wifi_beacon_record_proto_rawDesc
)

func file_com_craxiom_messaging_wifi_beacon_record_proto_rawDescGZIP() []byte {
	file_com_craxiom_messaging_wifi_beacon_record_proto_rawDescOnce.Do(func() {
		file_com_craxiom_messaging_wifi_beacon_record_proto_rawDescData = protoimpl.X.CompressGZIP(file_com_craxiom_messaging_wifi_beacon_record_proto_rawDescData)
	})
	return file_com_craxiom_messaging_wifi_beacon_record_proto_rawDescData
}

var file_com_craxiom_messaging_wifi_beacon_record_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_com_craxiom_messaging_wifi_beacon_record_proto_goTypes = []any{
	(*WifiBeaconRecord)(nil),      // 0: com.craxiom.messaging.WifiBeaconRecord
	(*WifiBeaconRecordData)(nil),  // 1: com.craxiom.messaging.WifiBeaconRecordData
	(*wrapperspb.Int32Value)(nil), // 2: google.protobuf.Int32Value
	(ServiceSetType)(0),           // 3: com.craxiom.messaging.wifi.serviceset.ServiceSetType
	(CipherSuite)(0),              // 4: com.craxiom.messaging.wifi.ciphersuite.CipherSuite
	(AkmSuite)(0),                 // 5: com.craxiom.messaging.wifi.akmsuite.AkmSuite
	(EncryptionType)(0),           // 6: com.craxiom.messaging.wifi.encryptiontype.EncryptionType
	(*wrapperspb.BoolValue)(nil),  // 7: google.protobuf.BoolValue
	(WifiBandwidth)(0),            // 8: com.craxiom.messaging.wifi.bandwidth.WifiBandwidth
	(*wrapperspb.FloatValue)(nil), // 9: google.protobuf.FloatValue
	(NodeType)(0),                 // 10: com.craxiom.messaging.wifi.nodetype.NodeType
	(Standard)(0),                 // 11: com.craxiom.messaging.wifi.standard.Standard
}
var file_com_craxiom_messaging_wifi_beacon_record_proto_depIdxs = []int32{
	1,  // 0: com.craxiom.messaging.WifiBeaconRecord.data:type_name -> com.craxiom.messaging.WifiBeaconRecordData
	2,  // 1: com.craxiom.messaging.WifiBeaconRecordData.beaconInterval:type_name -> google.protobuf.Int32Value
	3,  // 2: com.craxiom.messaging.WifiBeaconRecordData.serviceSetType:type_name -> com.craxiom.messaging.wifi.serviceset.ServiceSetType
	4,  // 3: com.craxiom.messaging.WifiBeaconRecordData.cipherSuites:type_name -> com.craxiom.messaging.wifi.ciphersuite.CipherSuite
	5,  // 4: com.craxiom.messaging.WifiBeaconRecordData.akmSuites:type_name -> com.craxiom.messaging.wifi.akmsuite.AkmSuite
	6,  // 5: com.craxiom.messaging.WifiBeaconRecordData.encryptionType:type_name -> com.craxiom.messaging.wifi.encryptiontype.EncryptionType
	7,  // 6: com.craxiom.messaging.WifiBeaconRecordData.wps:type_name -> google.protobuf.BoolValue
	7,  // 7: com.craxiom.messaging.WifiBeaconRecordData.passpoint:type_name -> google.protobuf.BoolValue
	8,  // 8: com.craxiom.messaging.WifiBeaconRecordData.bandwidth:type_name -> com.craxiom.messaging.wifi.bandwidth.WifiBandwidth
	2,  // 9: com.craxiom.messaging.WifiBeaconRecordData.channel:type_name -> google.protobuf.Int32Value
	2,  // 10: com.craxiom.messaging.WifiBeaconRecordData.frequencyMhz:type_name -> google.protobuf.Int32Value
	9,  // 11: com.craxiom.messaging.WifiBeaconRecordData.signalStrength:type_name -> google.protobuf.FloatValue
	9,  // 12: com.craxiom.messaging.WifiBeaconRecordData.snr:type_name -> google.protobuf.FloatValue
	10, // 13: com.craxiom.messaging.WifiBeaconRecordData.nodeType:type_name -> com.craxiom.messaging.wifi.nodetype.NodeType
	11, // 14: com.craxiom.messaging.WifiBeaconRecordData.standard:type_name -> com.craxiom.messaging.wifi.standard.Standard
	15, // [15:15] is the sub-list for method output_type
	15, // [15:15] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_com_craxiom_messaging_wifi_beacon_record_proto_init() }
func file_com_craxiom_messaging_wifi_beacon_record_proto_init() {
	if File_com_craxiom_messaging_wifi_beacon_record_proto != nil {
		return
	}
	file_com_craxiom_messaging_wifi_serviceset_service_set_proto_init()
	file_com_craxiom_messaging_wifi_ciphersuite_cipher_suite_proto_init()
	file_com_craxiom_messaging_wifi_akmsuite_akm_suite_proto_init()
	file_com_craxiom_messaging_wifi_encryptiontype_encryption_type_proto_init()
	file_com_craxiom_messaging_wifi_nodetype_node_type_proto_init()
	file_com_craxiom_messaging_wifi_standard_standard_proto_init()
	file_com_craxiom_messaging_wifi_bandwidth_wifi_bandwidth_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_com_craxiom_messaging_wifi_beacon_record_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*WifiBeaconRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_craxiom_messaging_wifi_beacon_record_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*WifiBeaconRecordData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_com_craxiom_messaging_wifi_beacon_record_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_com_craxiom_messaging_wifi_beacon_record_proto_goTypes,
		DependencyIndexes: file_com_craxiom_messaging_wifi_beacon_record_proto_depIdxs,
		MessageInfos:      file_com_craxiom_messaging_wifi_beacon_record_proto_msgTypes,
	}.Build()
	File_com_craxiom_messaging_wifi_beacon_record_proto = out.File
	file_com_craxiom_messaging_wifi_beacon_record_proto_rawDesc = nil
	file_com_craxiom_messaging_wifi_beacon_record_proto_goTypes = nil
	file_com_craxiom_messaging_wifi_beacon_record_proto_depIdxs = nil
}

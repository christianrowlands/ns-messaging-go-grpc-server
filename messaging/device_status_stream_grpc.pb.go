//*
// Defines the handshake sequence for the initial connection to a Network Survey gRPC server.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.26.1
// source: com/craxiom/messaging/grpc/device_status_stream.proto

package messaging

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DeviceStatus_StatusUpdate_FullMethodName = "/com.craxiom.messaging.grpc.DeviceStatus/StatusUpdate"
)

// DeviceStatusClient is the client API for DeviceStatus service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeviceStatusClient interface {
	StatusUpdate(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[DeviceStatus, StatusUpdateReply], error)
}

type deviceStatusClient struct {
	cc grpc.ClientConnInterface
}

func NewDeviceStatusClient(cc grpc.ClientConnInterface) DeviceStatusClient {
	return &deviceStatusClient{cc}
}

func (c *deviceStatusClient) StatusUpdate(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[DeviceStatus, StatusUpdateReply], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &DeviceStatus_ServiceDesc.Streams[0], DeviceStatus_StatusUpdate_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[DeviceStatus, StatusUpdateReply]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DeviceStatus_StatusUpdateClient = grpc.ClientStreamingClient[DeviceStatus, StatusUpdateReply]

// DeviceStatusServer is the server API for DeviceStatus service.
// All implementations must embed UnimplementedDeviceStatusServer
// for forward compatibility.
type DeviceStatusServer interface {
	StatusUpdate(grpc.ClientStreamingServer[DeviceStatus, StatusUpdateReply]) error
	mustEmbedUnimplementedDeviceStatusServer()
}

// UnimplementedDeviceStatusServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDeviceStatusServer struct{}

func (UnimplementedDeviceStatusServer) StatusUpdate(grpc.ClientStreamingServer[DeviceStatus, StatusUpdateReply]) error {
	return status.Errorf(codes.Unimplemented, "method StatusUpdate not implemented")
}
func (UnimplementedDeviceStatusServer) mustEmbedUnimplementedDeviceStatusServer() {}
func (UnimplementedDeviceStatusServer) testEmbeddedByValue()                      {}

// UnsafeDeviceStatusServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeviceStatusServer will
// result in compilation errors.
type UnsafeDeviceStatusServer interface {
	mustEmbedUnimplementedDeviceStatusServer()
}

func RegisterDeviceStatusServer(s grpc.ServiceRegistrar, srv DeviceStatusServer) {
	// If the following call pancis, it indicates UnimplementedDeviceStatusServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DeviceStatus_ServiceDesc, srv)
}

func _DeviceStatus_StatusUpdate_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DeviceStatusServer).StatusUpdate(&grpc.GenericServerStream[DeviceStatus, StatusUpdateReply]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DeviceStatus_StatusUpdateServer = grpc.ClientStreamingServer[DeviceStatus, StatusUpdateReply]

// DeviceStatus_ServiceDesc is the grpc.ServiceDesc for DeviceStatus service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DeviceStatus_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.craxiom.messaging.grpc.DeviceStatus",
	HandlerType: (*DeviceStatusServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StatusUpdate",
			Handler:       _DeviceStatus_StatusUpdate_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "com/craxiom/messaging/grpc/device_status_stream.proto",
}

//*
// A protobuf definition for sending the messages defined in the Network Survey Messaging API over a gRPC stream.
//
// This proto file is used to generate gRPC stubs so that a client can send the various messages defined in the Network
// Survey Messaging API to a gRPC based server. This file enables both the gRPC server and client stubs to be generated.
//
// This protobuf definition is provided as a convenience only.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.26.1
// source: com/craxiom/messaging/grpc/wireless_survey.proto

package messaging

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	WirelessSurvey_StreamGsmSurvey_FullMethodName              = "/com.craxiom.messaging.grpc.WirelessSurvey/StreamGsmSurvey"
	WirelessSurvey_StreamCdmaSurvey_FullMethodName             = "/com.craxiom.messaging.grpc.WirelessSurvey/StreamCdmaSurvey"
	WirelessSurvey_StreamUmtsSurvey_FullMethodName             = "/com.craxiom.messaging.grpc.WirelessSurvey/StreamUmtsSurvey"
	WirelessSurvey_StreamLteSurvey_FullMethodName              = "/com.craxiom.messaging.grpc.WirelessSurvey/StreamLteSurvey"
	WirelessSurvey_StreamNrSurvey_FullMethodName               = "/com.craxiom.messaging.grpc.WirelessSurvey/StreamNrSurvey"
	WirelessSurvey_StreamWifiBeaconSurvey_FullMethodName       = "/com.craxiom.messaging.grpc.WirelessSurvey/StreamWifiBeaconSurvey"
	WirelessSurvey_StreamWifiProbeRequestSurvey_FullMethodName = "/com.craxiom.messaging.grpc.WirelessSurvey/StreamWifiProbeRequestSurvey"
	WirelessSurvey_StreamWifiOtaSurvey_FullMethodName          = "/com.craxiom.messaging.grpc.WirelessSurvey/StreamWifiOtaSurvey"
	WirelessSurvey_StreamGnssSurvey_FullMethodName             = "/com.craxiom.messaging.grpc.WirelessSurvey/StreamGnssSurvey"
	WirelessSurvey_StreamEnergyDetections_FullMethodName       = "/com.craxiom.messaging.grpc.WirelessSurvey/StreamEnergyDetections"
	WirelessSurvey_StreamSignalDetections_FullMethodName       = "/com.craxiom.messaging.grpc.WirelessSurvey/StreamSignalDetections"
	WirelessSurvey_StreamLteRrc_FullMethodName                 = "/com.craxiom.messaging.grpc.WirelessSurvey/StreamLteRrc"
	WirelessSurvey_StreamLteNas_FullMethodName                 = "/com.craxiom.messaging.grpc.WirelessSurvey/StreamLteNas"
)

// WirelessSurveyClient is the client API for WirelessSurvey service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WirelessSurveyClient interface {
	StreamGsmSurvey(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[GsmRecord, GsmSurveyResponse], error)
	StreamCdmaSurvey(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[CdmaRecord, CdmaSurveyResponse], error)
	StreamUmtsSurvey(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[UmtsRecord, UmtsSurveyResponse], error)
	StreamLteSurvey(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[LteRecord, LteSurveyResponse], error)
	StreamNrSurvey(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[NrRecord, NrSurveyResponse], error)
	StreamWifiBeaconSurvey(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[WifiBeaconRecord, WifiBeaconSurveyResponse], error)
	StreamWifiProbeRequestSurvey(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[WifiProbeRequestRecord, WifiProbeRequestSurveyResponse], error)
	StreamWifiOtaSurvey(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[WifiOtaRecord, WifiOtaSurveyResponse], error)
	StreamGnssSurvey(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[GnssRecord, GnssSurveyResponse], error)
	StreamEnergyDetections(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[EnergyDetection, EnergyDetectionResponse], error)
	StreamSignalDetections(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[SignalDetection, SignalDetectionResponse], error)
	StreamLteRrc(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[LteRrc, LteRrcResponse], error)
	StreamLteNas(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[LteNas, LteNasResponse], error)
}

type wirelessSurveyClient struct {
	cc grpc.ClientConnInterface
}

func NewWirelessSurveyClient(cc grpc.ClientConnInterface) WirelessSurveyClient {
	return &wirelessSurveyClient{cc}
}

func (c *wirelessSurveyClient) StreamGsmSurvey(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[GsmRecord, GsmSurveyResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &WirelessSurvey_ServiceDesc.Streams[0], WirelessSurvey_StreamGsmSurvey_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GsmRecord, GsmSurveyResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type WirelessSurvey_StreamGsmSurveyClient = grpc.ClientStreamingClient[GsmRecord, GsmSurveyResponse]

func (c *wirelessSurveyClient) StreamCdmaSurvey(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[CdmaRecord, CdmaSurveyResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &WirelessSurvey_ServiceDesc.Streams[1], WirelessSurvey_StreamCdmaSurvey_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[CdmaRecord, CdmaSurveyResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type WirelessSurvey_StreamCdmaSurveyClient = grpc.ClientStreamingClient[CdmaRecord, CdmaSurveyResponse]

func (c *wirelessSurveyClient) StreamUmtsSurvey(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[UmtsRecord, UmtsSurveyResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &WirelessSurvey_ServiceDesc.Streams[2], WirelessSurvey_StreamUmtsSurvey_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[UmtsRecord, UmtsSurveyResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type WirelessSurvey_StreamUmtsSurveyClient = grpc.ClientStreamingClient[UmtsRecord, UmtsSurveyResponse]

func (c *wirelessSurveyClient) StreamLteSurvey(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[LteRecord, LteSurveyResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &WirelessSurvey_ServiceDesc.Streams[3], WirelessSurvey_StreamLteSurvey_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[LteRecord, LteSurveyResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type WirelessSurvey_StreamLteSurveyClient = grpc.ClientStreamingClient[LteRecord, LteSurveyResponse]

func (c *wirelessSurveyClient) StreamNrSurvey(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[NrRecord, NrSurveyResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &WirelessSurvey_ServiceDesc.Streams[4], WirelessSurvey_StreamNrSurvey_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[NrRecord, NrSurveyResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type WirelessSurvey_StreamNrSurveyClient = grpc.ClientStreamingClient[NrRecord, NrSurveyResponse]

func (c *wirelessSurveyClient) StreamWifiBeaconSurvey(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[WifiBeaconRecord, WifiBeaconSurveyResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &WirelessSurvey_ServiceDesc.Streams[5], WirelessSurvey_StreamWifiBeaconSurvey_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[WifiBeaconRecord, WifiBeaconSurveyResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type WirelessSurvey_StreamWifiBeaconSurveyClient = grpc.ClientStreamingClient[WifiBeaconRecord, WifiBeaconSurveyResponse]

func (c *wirelessSurveyClient) StreamWifiProbeRequestSurvey(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[WifiProbeRequestRecord, WifiProbeRequestSurveyResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &WirelessSurvey_ServiceDesc.Streams[6], WirelessSurvey_StreamWifiProbeRequestSurvey_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[WifiProbeRequestRecord, WifiProbeRequestSurveyResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type WirelessSurvey_StreamWifiProbeRequestSurveyClient = grpc.ClientStreamingClient[WifiProbeRequestRecord, WifiProbeRequestSurveyResponse]

func (c *wirelessSurveyClient) StreamWifiOtaSurvey(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[WifiOtaRecord, WifiOtaSurveyResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &WirelessSurvey_ServiceDesc.Streams[7], WirelessSurvey_StreamWifiOtaSurvey_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[WifiOtaRecord, WifiOtaSurveyResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type WirelessSurvey_StreamWifiOtaSurveyClient = grpc.ClientStreamingClient[WifiOtaRecord, WifiOtaSurveyResponse]

func (c *wirelessSurveyClient) StreamGnssSurvey(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[GnssRecord, GnssSurveyResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &WirelessSurvey_ServiceDesc.Streams[8], WirelessSurvey_StreamGnssSurvey_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GnssRecord, GnssSurveyResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type WirelessSurvey_StreamGnssSurveyClient = grpc.ClientStreamingClient[GnssRecord, GnssSurveyResponse]

func (c *wirelessSurveyClient) StreamEnergyDetections(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[EnergyDetection, EnergyDetectionResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &WirelessSurvey_ServiceDesc.Streams[9], WirelessSurvey_StreamEnergyDetections_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[EnergyDetection, EnergyDetectionResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type WirelessSurvey_StreamEnergyDetectionsClient = grpc.ClientStreamingClient[EnergyDetection, EnergyDetectionResponse]

func (c *wirelessSurveyClient) StreamSignalDetections(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[SignalDetection, SignalDetectionResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &WirelessSurvey_ServiceDesc.Streams[10], WirelessSurvey_StreamSignalDetections_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SignalDetection, SignalDetectionResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type WirelessSurvey_StreamSignalDetectionsClient = grpc.ClientStreamingClient[SignalDetection, SignalDetectionResponse]

func (c *wirelessSurveyClient) StreamLteRrc(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[LteRrc, LteRrcResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &WirelessSurvey_ServiceDesc.Streams[11], WirelessSurvey_StreamLteRrc_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[LteRrc, LteRrcResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type WirelessSurvey_StreamLteRrcClient = grpc.ClientStreamingClient[LteRrc, LteRrcResponse]

func (c *wirelessSurveyClient) StreamLteNas(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[LteNas, LteNasResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &WirelessSurvey_ServiceDesc.Streams[12], WirelessSurvey_StreamLteNas_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[LteNas, LteNasResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type WirelessSurvey_StreamLteNasClient = grpc.ClientStreamingClient[LteNas, LteNasResponse]

// WirelessSurveyServer is the server API for WirelessSurvey service.
// All implementations must embed UnimplementedWirelessSurveyServer
// for forward compatibility.
type WirelessSurveyServer interface {
	StreamGsmSurvey(grpc.ClientStreamingServer[GsmRecord, GsmSurveyResponse]) error
	StreamCdmaSurvey(grpc.ClientStreamingServer[CdmaRecord, CdmaSurveyResponse]) error
	StreamUmtsSurvey(grpc.ClientStreamingServer[UmtsRecord, UmtsSurveyResponse]) error
	StreamLteSurvey(grpc.ClientStreamingServer[LteRecord, LteSurveyResponse]) error
	StreamNrSurvey(grpc.ClientStreamingServer[NrRecord, NrSurveyResponse]) error
	StreamWifiBeaconSurvey(grpc.ClientStreamingServer[WifiBeaconRecord, WifiBeaconSurveyResponse]) error
	StreamWifiProbeRequestSurvey(grpc.ClientStreamingServer[WifiProbeRequestRecord, WifiProbeRequestSurveyResponse]) error
	StreamWifiOtaSurvey(grpc.ClientStreamingServer[WifiOtaRecord, WifiOtaSurveyResponse]) error
	StreamGnssSurvey(grpc.ClientStreamingServer[GnssRecord, GnssSurveyResponse]) error
	StreamEnergyDetections(grpc.ClientStreamingServer[EnergyDetection, EnergyDetectionResponse]) error
	StreamSignalDetections(grpc.ClientStreamingServer[SignalDetection, SignalDetectionResponse]) error
	StreamLteRrc(grpc.ClientStreamingServer[LteRrc, LteRrcResponse]) error
	StreamLteNas(grpc.ClientStreamingServer[LteNas, LteNasResponse]) error
	mustEmbedUnimplementedWirelessSurveyServer()
}

// UnimplementedWirelessSurveyServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedWirelessSurveyServer struct{}

func (UnimplementedWirelessSurveyServer) StreamGsmSurvey(grpc.ClientStreamingServer[GsmRecord, GsmSurveyResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamGsmSurvey not implemented")
}
func (UnimplementedWirelessSurveyServer) StreamCdmaSurvey(grpc.ClientStreamingServer[CdmaRecord, CdmaSurveyResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamCdmaSurvey not implemented")
}
func (UnimplementedWirelessSurveyServer) StreamUmtsSurvey(grpc.ClientStreamingServer[UmtsRecord, UmtsSurveyResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamUmtsSurvey not implemented")
}
func (UnimplementedWirelessSurveyServer) StreamLteSurvey(grpc.ClientStreamingServer[LteRecord, LteSurveyResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamLteSurvey not implemented")
}
func (UnimplementedWirelessSurveyServer) StreamNrSurvey(grpc.ClientStreamingServer[NrRecord, NrSurveyResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamNrSurvey not implemented")
}
func (UnimplementedWirelessSurveyServer) StreamWifiBeaconSurvey(grpc.ClientStreamingServer[WifiBeaconRecord, WifiBeaconSurveyResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamWifiBeaconSurvey not implemented")
}
func (UnimplementedWirelessSurveyServer) StreamWifiProbeRequestSurvey(grpc.ClientStreamingServer[WifiProbeRequestRecord, WifiProbeRequestSurveyResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamWifiProbeRequestSurvey not implemented")
}
func (UnimplementedWirelessSurveyServer) StreamWifiOtaSurvey(grpc.ClientStreamingServer[WifiOtaRecord, WifiOtaSurveyResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamWifiOtaSurvey not implemented")
}
func (UnimplementedWirelessSurveyServer) StreamGnssSurvey(grpc.ClientStreamingServer[GnssRecord, GnssSurveyResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamGnssSurvey not implemented")
}
func (UnimplementedWirelessSurveyServer) StreamEnergyDetections(grpc.ClientStreamingServer[EnergyDetection, EnergyDetectionResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamEnergyDetections not implemented")
}
func (UnimplementedWirelessSurveyServer) StreamSignalDetections(grpc.ClientStreamingServer[SignalDetection, SignalDetectionResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamSignalDetections not implemented")
}
func (UnimplementedWirelessSurveyServer) StreamLteRrc(grpc.ClientStreamingServer[LteRrc, LteRrcResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamLteRrc not implemented")
}
func (UnimplementedWirelessSurveyServer) StreamLteNas(grpc.ClientStreamingServer[LteNas, LteNasResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamLteNas not implemented")
}
func (UnimplementedWirelessSurveyServer) mustEmbedUnimplementedWirelessSurveyServer() {}
func (UnimplementedWirelessSurveyServer) testEmbeddedByValue()                        {}

// UnsafeWirelessSurveyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WirelessSurveyServer will
// result in compilation errors.
type UnsafeWirelessSurveyServer interface {
	mustEmbedUnimplementedWirelessSurveyServer()
}

func RegisterWirelessSurveyServer(s grpc.ServiceRegistrar, srv WirelessSurveyServer) {
	// If the following call pancis, it indicates UnimplementedWirelessSurveyServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&WirelessSurvey_ServiceDesc, srv)
}

func _WirelessSurvey_StreamGsmSurvey_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(WirelessSurveyServer).StreamGsmSurvey(&grpc.GenericServerStream[GsmRecord, GsmSurveyResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type WirelessSurvey_StreamGsmSurveyServer = grpc.ClientStreamingServer[GsmRecord, GsmSurveyResponse]

func _WirelessSurvey_StreamCdmaSurvey_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(WirelessSurveyServer).StreamCdmaSurvey(&grpc.GenericServerStream[CdmaRecord, CdmaSurveyResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type WirelessSurvey_StreamCdmaSurveyServer = grpc.ClientStreamingServer[CdmaRecord, CdmaSurveyResponse]

func _WirelessSurvey_StreamUmtsSurvey_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(WirelessSurveyServer).StreamUmtsSurvey(&grpc.GenericServerStream[UmtsRecord, UmtsSurveyResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type WirelessSurvey_StreamUmtsSurveyServer = grpc.ClientStreamingServer[UmtsRecord, UmtsSurveyResponse]

func _WirelessSurvey_StreamLteSurvey_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(WirelessSurveyServer).StreamLteSurvey(&grpc.GenericServerStream[LteRecord, LteSurveyResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type WirelessSurvey_StreamLteSurveyServer = grpc.ClientStreamingServer[LteRecord, LteSurveyResponse]

func _WirelessSurvey_StreamNrSurvey_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(WirelessSurveyServer).StreamNrSurvey(&grpc.GenericServerStream[NrRecord, NrSurveyResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type WirelessSurvey_StreamNrSurveyServer = grpc.ClientStreamingServer[NrRecord, NrSurveyResponse]

func _WirelessSurvey_StreamWifiBeaconSurvey_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(WirelessSurveyServer).StreamWifiBeaconSurvey(&grpc.GenericServerStream[WifiBeaconRecord, WifiBeaconSurveyResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type WirelessSurvey_StreamWifiBeaconSurveyServer = grpc.ClientStreamingServer[WifiBeaconRecord, WifiBeaconSurveyResponse]

func _WirelessSurvey_StreamWifiProbeRequestSurvey_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(WirelessSurveyServer).StreamWifiProbeRequestSurvey(&grpc.GenericServerStream[WifiProbeRequestRecord, WifiProbeRequestSurveyResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type WirelessSurvey_StreamWifiProbeRequestSurveyServer = grpc.ClientStreamingServer[WifiProbeRequestRecord, WifiProbeRequestSurveyResponse]

func _WirelessSurvey_StreamWifiOtaSurvey_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(WirelessSurveyServer).StreamWifiOtaSurvey(&grpc.GenericServerStream[WifiOtaRecord, WifiOtaSurveyResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type WirelessSurvey_StreamWifiOtaSurveyServer = grpc.ClientStreamingServer[WifiOtaRecord, WifiOtaSurveyResponse]

func _WirelessSurvey_StreamGnssSurvey_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(WirelessSurveyServer).StreamGnssSurvey(&grpc.GenericServerStream[GnssRecord, GnssSurveyResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type WirelessSurvey_StreamGnssSurveyServer = grpc.ClientStreamingServer[GnssRecord, GnssSurveyResponse]

func _WirelessSurvey_StreamEnergyDetections_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(WirelessSurveyServer).StreamEnergyDetections(&grpc.GenericServerStream[EnergyDetection, EnergyDetectionResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type WirelessSurvey_StreamEnergyDetectionsServer = grpc.ClientStreamingServer[EnergyDetection, EnergyDetectionResponse]

func _WirelessSurvey_StreamSignalDetections_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(WirelessSurveyServer).StreamSignalDetections(&grpc.GenericServerStream[SignalDetection, SignalDetectionResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type WirelessSurvey_StreamSignalDetectionsServer = grpc.ClientStreamingServer[SignalDetection, SignalDetectionResponse]

func _WirelessSurvey_StreamLteRrc_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(WirelessSurveyServer).StreamLteRrc(&grpc.GenericServerStream[LteRrc, LteRrcResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type WirelessSurvey_StreamLteRrcServer = grpc.ClientStreamingServer[LteRrc, LteRrcResponse]

func _WirelessSurvey_StreamLteNas_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(WirelessSurveyServer).StreamLteNas(&grpc.GenericServerStream[LteNas, LteNasResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type WirelessSurvey_StreamLteNasServer = grpc.ClientStreamingServer[LteNas, LteNasResponse]

// WirelessSurvey_ServiceDesc is the grpc.ServiceDesc for WirelessSurvey service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WirelessSurvey_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.craxiom.messaging.grpc.WirelessSurvey",
	HandlerType: (*WirelessSurveyServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamGsmSurvey",
			Handler:       _WirelessSurvey_StreamGsmSurvey_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "StreamCdmaSurvey",
			Handler:       _WirelessSurvey_StreamCdmaSurvey_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "StreamUmtsSurvey",
			Handler:       _WirelessSurvey_StreamUmtsSurvey_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "StreamLteSurvey",
			Handler:       _WirelessSurvey_StreamLteSurvey_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "StreamNrSurvey",
			Handler:       _WirelessSurvey_StreamNrSurvey_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "StreamWifiBeaconSurvey",
			Handler:       _WirelessSurvey_StreamWifiBeaconSurvey_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "StreamWifiProbeRequestSurvey",
			Handler:       _WirelessSurvey_StreamWifiProbeRequestSurvey_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "StreamWifiOtaSurvey",
			Handler:       _WirelessSurvey_StreamWifiOtaSurvey_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "StreamGnssSurvey",
			Handler:       _WirelessSurvey_StreamGnssSurvey_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "StreamEnergyDetections",
			Handler:       _WirelessSurvey_StreamEnergyDetections_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "StreamSignalDetections",
			Handler:       _WirelessSurvey_StreamSignalDetections_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "StreamLteRrc",
			Handler:       _WirelessSurvey_StreamLteRrc_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "StreamLteNas",
			Handler:       _WirelessSurvey_StreamLteNas_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "com/craxiom/messaging/grpc/wireless_survey.proto",
}

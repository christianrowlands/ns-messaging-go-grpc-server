//*
// A protobuf definition of the Phone State message defined in the Network Survey Messaging API.
//
// This protobuf definition is provided as a convenience only. See the official API documentation for the true Phone
// State message schema.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.26.1
// source: com/craxiom/messaging/phone_state.proto

package messaging

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PhoneState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version     string          `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	MessageType string          `protobuf:"bytes,2,opt,name=messageType,proto3" json:"messageType,omitempty"`
	Data        *PhoneStateData `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *PhoneState) Reset() {
	*x = PhoneState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_craxiom_messaging_phone_state_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PhoneState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PhoneState) ProtoMessage() {}

func (x *PhoneState) ProtoReflect() protoreflect.Message {
	mi := &file_com_craxiom_messaging_phone_state_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PhoneState.ProtoReflect.Descriptor instead.
func (*PhoneState) Descriptor() ([]byte, []int) {
	return file_com_craxiom_messaging_phone_state_proto_rawDescGZIP(), []int{0}
}

func (x *PhoneState) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *PhoneState) GetMessageType() string {
	if x != nil {
		return x.MessageType
	}
	return ""
}

func (x *PhoneState) GetData() *PhoneStateData {
	if x != nil {
		return x.Data
	}
	return nil
}

type PhoneStateData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceSerialNumber string  `protobuf:"bytes,1,opt,name=deviceSerialNumber,proto3" json:"deviceSerialNumber,omitempty"`
	DeviceName         string  `protobuf:"bytes,2,opt,name=deviceName,proto3" json:"deviceName,omitempty"`
	DeviceTime         string  `protobuf:"bytes,3,opt,name=deviceTime,proto3" json:"deviceTime,omitempty"`
	Latitude           float64 `protobuf:"fixed64,4,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Longitude          float64 `protobuf:"fixed64,5,opt,name=longitude,proto3" json:"longitude,omitempty"`
	Altitude           float32 `protobuf:"fixed32,6,opt,name=altitude,proto3" json:"altitude,omitempty"`
	MissionId          string  `protobuf:"bytes,7,opt,name=missionId,proto3" json:"missionId,omitempty"`
	RecordNumber       int32   `protobuf:"varint,8,opt,name=recordNumber,proto3" json:"recordNumber,omitempty"`
	// Orientation of sensor and sensor parameters. optional.
	Heading                 float32                    `protobuf:"fixed32,50,opt,name=heading,proto3" json:"heading,omitempty"`
	Pitch                   float32                    `protobuf:"fixed32,51,opt,name=pitch,proto3" json:"pitch,omitempty"`
	Roll                    float32                    `protobuf:"fixed32,52,opt,name=roll,proto3" json:"roll,omitempty"`
	FieldOfView             float32                    `protobuf:"fixed32,53,opt,name=fieldOfView,proto3" json:"fieldOfView,omitempty"`
	ReceiverSensitivity     float32                    `protobuf:"fixed32,54,opt,name=receiverSensitivity,proto3" json:"receiverSensitivity,omitempty"`
	Speed                   float32                    `protobuf:"fixed32,55,opt,name=speed,proto3" json:"speed,omitempty"`
	SimState                SimState                   `protobuf:"varint,9,opt,name=simState,proto3,enum=com.craxiom.messaging.phonestate.simstate.SimState" json:"simState,omitempty"`
	SimOperator             string                     `protobuf:"bytes,10,opt,name=simOperator,proto3" json:"simOperator,omitempty"`
	NetworkRegistrationInfo []*NetworkRegistrationInfo `protobuf:"bytes,11,rep,name=networkRegistrationInfo,proto3" json:"networkRegistrationInfo,omitempty"`
	Accuracy                int32                      `protobuf:"varint,12,opt,name=accuracy,proto3" json:"accuracy,omitempty"`
	Slot                    *wrapperspb.Int32Value     `protobuf:"bytes,13,opt,name=slot,proto3" json:"slot,omitempty"`
}

func (x *PhoneStateData) Reset() {
	*x = PhoneStateData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_craxiom_messaging_phone_state_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PhoneStateData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PhoneStateData) ProtoMessage() {}

func (x *PhoneStateData) ProtoReflect() protoreflect.Message {
	mi := &file_com_craxiom_messaging_phone_state_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PhoneStateData.ProtoReflect.Descriptor instead.
func (*PhoneStateData) Descriptor() ([]byte, []int) {
	return file_com_craxiom_messaging_phone_state_proto_rawDescGZIP(), []int{1}
}

func (x *PhoneStateData) GetDeviceSerialNumber() string {
	if x != nil {
		return x.DeviceSerialNumber
	}
	return ""
}

func (x *PhoneStateData) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

func (x *PhoneStateData) GetDeviceTime() string {
	if x != nil {
		return x.DeviceTime
	}
	return ""
}

func (x *PhoneStateData) GetLatitude() float64 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *PhoneStateData) GetLongitude() float64 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

func (x *PhoneStateData) GetAltitude() float32 {
	if x != nil {
		return x.Altitude
	}
	return 0
}

func (x *PhoneStateData) GetMissionId() string {
	if x != nil {
		return x.MissionId
	}
	return ""
}

func (x *PhoneStateData) GetRecordNumber() int32 {
	if x != nil {
		return x.RecordNumber
	}
	return 0
}

func (x *PhoneStateData) GetHeading() float32 {
	if x != nil {
		return x.Heading
	}
	return 0
}

func (x *PhoneStateData) GetPitch() float32 {
	if x != nil {
		return x.Pitch
	}
	return 0
}

func (x *PhoneStateData) GetRoll() float32 {
	if x != nil {
		return x.Roll
	}
	return 0
}

func (x *PhoneStateData) GetFieldOfView() float32 {
	if x != nil {
		return x.FieldOfView
	}
	return 0
}

func (x *PhoneStateData) GetReceiverSensitivity() float32 {
	if x != nil {
		return x.ReceiverSensitivity
	}
	return 0
}

func (x *PhoneStateData) GetSpeed() float32 {
	if x != nil {
		return x.Speed
	}
	return 0
}

func (x *PhoneStateData) GetSimState() SimState {
	if x != nil {
		return x.SimState
	}
	return SimState_UNKNOWN
}

func (x *PhoneStateData) GetSimOperator() string {
	if x != nil {
		return x.SimOperator
	}
	return ""
}

func (x *PhoneStateData) GetNetworkRegistrationInfo() []*NetworkRegistrationInfo {
	if x != nil {
		return x.NetworkRegistrationInfo
	}
	return nil
}

func (x *PhoneStateData) GetAccuracy() int32 {
	if x != nil {
		return x.Accuracy
	}
	return 0
}

func (x *PhoneStateData) GetSlot() *wrapperspb.Int32Value {
	if x != nil {
		return x.Slot
	}
	return nil
}

// Used to report the details of a registered network
type NetworkRegistrationInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Domain                  Domain                 `protobuf:"varint,1,opt,name=domain,proto3,enum=com.craxiom.messaging.phonestate.domain.Domain" json:"domain,omitempty"`
	AccessNetworkTechnology NetworkType            `protobuf:"varint,2,opt,name=accessNetworkTechnology,proto3,enum=com.craxiom.messaging.phonestate.networktype.NetworkType" json:"accessNetworkTechnology,omitempty"`
	Roaming                 *wrapperspb.BoolValue  `protobuf:"bytes,3,opt,name=roaming,proto3" json:"roaming,omitempty"`
	RejectCause             *wrapperspb.Int32Value `protobuf:"bytes,4,opt,name=rejectCause,proto3" json:"rejectCause,omitempty"`
	// Types that are assignable to CellIdentity:
	//
	//	*NetworkRegistrationInfo_CellIdentityGsm
	//	*NetworkRegistrationInfo_CellIdentityCdma
	//	*NetworkRegistrationInfo_CellIdentityUmts
	//	*NetworkRegistrationInfo_CellIdentityLte
	//	*NetworkRegistrationInfo_CellIdentityNr
	CellIdentity isNetworkRegistrationInfo_CellIdentity `protobuf_oneof:"cellIdentity"`
}

func (x *NetworkRegistrationInfo) Reset() {
	*x = NetworkRegistrationInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_craxiom_messaging_phone_state_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkRegistrationInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkRegistrationInfo) ProtoMessage() {}

func (x *NetworkRegistrationInfo) ProtoReflect() protoreflect.Message {
	mi := &file_com_craxiom_messaging_phone_state_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkRegistrationInfo.ProtoReflect.Descriptor instead.
func (*NetworkRegistrationInfo) Descriptor() ([]byte, []int) {
	return file_com_craxiom_messaging_phone_state_proto_rawDescGZIP(), []int{2}
}

func (x *NetworkRegistrationInfo) GetDomain() Domain {
	if x != nil {
		return x.Domain
	}
	return Domain_UNKNOWN
}

func (x *NetworkRegistrationInfo) GetAccessNetworkTechnology() NetworkType {
	if x != nil {
		return x.AccessNetworkTechnology
	}
	return NetworkType_UNKNOWN
}

func (x *NetworkRegistrationInfo) GetRoaming() *wrapperspb.BoolValue {
	if x != nil {
		return x.Roaming
	}
	return nil
}

func (x *NetworkRegistrationInfo) GetRejectCause() *wrapperspb.Int32Value {
	if x != nil {
		return x.RejectCause
	}
	return nil
}

func (m *NetworkRegistrationInfo) GetCellIdentity() isNetworkRegistrationInfo_CellIdentity {
	if m != nil {
		return m.CellIdentity
	}
	return nil
}

func (x *NetworkRegistrationInfo) GetCellIdentityGsm() *CellIdentityGsm {
	if x, ok := x.GetCellIdentity().(*NetworkRegistrationInfo_CellIdentityGsm); ok {
		return x.CellIdentityGsm
	}
	return nil
}

func (x *NetworkRegistrationInfo) GetCellIdentityCdma() *CellIdentityCdma {
	if x, ok := x.GetCellIdentity().(*NetworkRegistrationInfo_CellIdentityCdma); ok {
		return x.CellIdentityCdma
	}
	return nil
}

func (x *NetworkRegistrationInfo) GetCellIdentityUmts() *CellIdentityUmts {
	if x, ok := x.GetCellIdentity().(*NetworkRegistrationInfo_CellIdentityUmts); ok {
		return x.CellIdentityUmts
	}
	return nil
}

func (x *NetworkRegistrationInfo) GetCellIdentityLte() *CellIdentityLte {
	if x, ok := x.GetCellIdentity().(*NetworkRegistrationInfo_CellIdentityLte); ok {
		return x.CellIdentityLte
	}
	return nil
}

func (x *NetworkRegistrationInfo) GetCellIdentityNr() *CellIdentityNr {
	if x, ok := x.GetCellIdentity().(*NetworkRegistrationInfo_CellIdentityNr); ok {
		return x.CellIdentityNr
	}
	return nil
}

type isNetworkRegistrationInfo_CellIdentity interface {
	isNetworkRegistrationInfo_CellIdentity()
}

type NetworkRegistrationInfo_CellIdentityGsm struct {
	CellIdentityGsm *CellIdentityGsm `protobuf:"bytes,5,opt,name=cellIdentityGsm,proto3,oneof"`
}

type NetworkRegistrationInfo_CellIdentityCdma struct {
	CellIdentityCdma *CellIdentityCdma `protobuf:"bytes,6,opt,name=cellIdentityCdma,proto3,oneof"`
}

type NetworkRegistrationInfo_CellIdentityUmts struct {
	CellIdentityUmts *CellIdentityUmts `protobuf:"bytes,7,opt,name=cellIdentityUmts,proto3,oneof"`
}

type NetworkRegistrationInfo_CellIdentityLte struct {
	CellIdentityLte *CellIdentityLte `protobuf:"bytes,8,opt,name=cellIdentityLte,proto3,oneof"`
}

type NetworkRegistrationInfo_CellIdentityNr struct {
	CellIdentityNr *CellIdentityNr `protobuf:"bytes,9,opt,name=cellIdentityNr,proto3,oneof"`
}

func (*NetworkRegistrationInfo_CellIdentityGsm) isNetworkRegistrationInfo_CellIdentity() {}

func (*NetworkRegistrationInfo_CellIdentityCdma) isNetworkRegistrationInfo_CellIdentity() {}

func (*NetworkRegistrationInfo_CellIdentityUmts) isNetworkRegistrationInfo_CellIdentity() {}

func (*NetworkRegistrationInfo_CellIdentityLte) isNetworkRegistrationInfo_CellIdentity() {}

func (*NetworkRegistrationInfo_CellIdentityNr) isNetworkRegistrationInfo_CellIdentity() {}

type CellIdentityGsm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mcc   *wrapperspb.Int32Value `protobuf:"bytes,1,opt,name=mcc,proto3" json:"mcc,omitempty"`
	Mnc   *wrapperspb.Int32Value `protobuf:"bytes,2,opt,name=mnc,proto3" json:"mnc,omitempty"`
	Lac   *wrapperspb.Int32Value `protobuf:"bytes,3,opt,name=lac,proto3" json:"lac,omitempty"`
	Ci    *wrapperspb.Int32Value `protobuf:"bytes,4,opt,name=ci,proto3" json:"ci,omitempty"`
	Arfcn *wrapperspb.Int32Value `protobuf:"bytes,5,opt,name=arfcn,proto3" json:"arfcn,omitempty"`
	Bsic  *wrapperspb.Int32Value `protobuf:"bytes,6,opt,name=bsic,proto3" json:"bsic,omitempty"`
}

func (x *CellIdentityGsm) Reset() {
	*x = CellIdentityGsm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_craxiom_messaging_phone_state_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellIdentityGsm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellIdentityGsm) ProtoMessage() {}

func (x *CellIdentityGsm) ProtoReflect() protoreflect.Message {
	mi := &file_com_craxiom_messaging_phone_state_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellIdentityGsm.ProtoReflect.Descriptor instead.
func (*CellIdentityGsm) Descriptor() ([]byte, []int) {
	return file_com_craxiom_messaging_phone_state_proto_rawDescGZIP(), []int{3}
}

func (x *CellIdentityGsm) GetMcc() *wrapperspb.Int32Value {
	if x != nil {
		return x.Mcc
	}
	return nil
}

func (x *CellIdentityGsm) GetMnc() *wrapperspb.Int32Value {
	if x != nil {
		return x.Mnc
	}
	return nil
}

func (x *CellIdentityGsm) GetLac() *wrapperspb.Int32Value {
	if x != nil {
		return x.Lac
	}
	return nil
}

func (x *CellIdentityGsm) GetCi() *wrapperspb.Int32Value {
	if x != nil {
		return x.Ci
	}
	return nil
}

func (x *CellIdentityGsm) GetArfcn() *wrapperspb.Int32Value {
	if x != nil {
		return x.Arfcn
	}
	return nil
}

func (x *CellIdentityGsm) GetBsic() *wrapperspb.Int32Value {
	if x != nil {
		return x.Bsic
	}
	return nil
}

type CellIdentityCdma struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sid  *wrapperspb.Int32Value `protobuf:"bytes,1,opt,name=sid,proto3" json:"sid,omitempty"`
	Nid  *wrapperspb.Int32Value `protobuf:"bytes,2,opt,name=nid,proto3" json:"nid,omitempty"`
	Bsid *wrapperspb.Int32Value `protobuf:"bytes,3,opt,name=bsid,proto3" json:"bsid,omitempty"`
}

func (x *CellIdentityCdma) Reset() {
	*x = CellIdentityCdma{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_craxiom_messaging_phone_state_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellIdentityCdma) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellIdentityCdma) ProtoMessage() {}

func (x *CellIdentityCdma) ProtoReflect() protoreflect.Message {
	mi := &file_com_craxiom_messaging_phone_state_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellIdentityCdma.ProtoReflect.Descriptor instead.
func (*CellIdentityCdma) Descriptor() ([]byte, []int) {
	return file_com_craxiom_messaging_phone_state_proto_rawDescGZIP(), []int{4}
}

func (x *CellIdentityCdma) GetSid() *wrapperspb.Int32Value {
	if x != nil {
		return x.Sid
	}
	return nil
}

func (x *CellIdentityCdma) GetNid() *wrapperspb.Int32Value {
	if x != nil {
		return x.Nid
	}
	return nil
}

func (x *CellIdentityCdma) GetBsid() *wrapperspb.Int32Value {
	if x != nil {
		return x.Bsid
	}
	return nil
}

type CellIdentityUmts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mcc    *wrapperspb.Int32Value `protobuf:"bytes,1,opt,name=mcc,proto3" json:"mcc,omitempty"`
	Mnc    *wrapperspb.Int32Value `protobuf:"bytes,2,opt,name=mnc,proto3" json:"mnc,omitempty"`
	Lac    *wrapperspb.Int32Value `protobuf:"bytes,3,opt,name=lac,proto3" json:"lac,omitempty"`
	Cid    *wrapperspb.Int32Value `protobuf:"bytes,4,opt,name=cid,proto3" json:"cid,omitempty"`
	Uarfcn *wrapperspb.Int32Value `protobuf:"bytes,5,opt,name=uarfcn,proto3" json:"uarfcn,omitempty"`
	Psc    *wrapperspb.Int32Value `protobuf:"bytes,6,opt,name=psc,proto3" json:"psc,omitempty"`
}

func (x *CellIdentityUmts) Reset() {
	*x = CellIdentityUmts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_craxiom_messaging_phone_state_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellIdentityUmts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellIdentityUmts) ProtoMessage() {}

func (x *CellIdentityUmts) ProtoReflect() protoreflect.Message {
	mi := &file_com_craxiom_messaging_phone_state_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellIdentityUmts.ProtoReflect.Descriptor instead.
func (*CellIdentityUmts) Descriptor() ([]byte, []int) {
	return file_com_craxiom_messaging_phone_state_proto_rawDescGZIP(), []int{5}
}

func (x *CellIdentityUmts) GetMcc() *wrapperspb.Int32Value {
	if x != nil {
		return x.Mcc
	}
	return nil
}

func (x *CellIdentityUmts) GetMnc() *wrapperspb.Int32Value {
	if x != nil {
		return x.Mnc
	}
	return nil
}

func (x *CellIdentityUmts) GetLac() *wrapperspb.Int32Value {
	if x != nil {
		return x.Lac
	}
	return nil
}

func (x *CellIdentityUmts) GetCid() *wrapperspb.Int32Value {
	if x != nil {
		return x.Cid
	}
	return nil
}

func (x *CellIdentityUmts) GetUarfcn() *wrapperspb.Int32Value {
	if x != nil {
		return x.Uarfcn
	}
	return nil
}

func (x *CellIdentityUmts) GetPsc() *wrapperspb.Int32Value {
	if x != nil {
		return x.Psc
	}
	return nil
}

type CellIdentityLte struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mcc    *wrapperspb.Int32Value `protobuf:"bytes,1,opt,name=mcc,proto3" json:"mcc,omitempty"`
	Mnc    *wrapperspb.Int32Value `protobuf:"bytes,2,opt,name=mnc,proto3" json:"mnc,omitempty"`
	Tac    *wrapperspb.Int32Value `protobuf:"bytes,3,opt,name=tac,proto3" json:"tac,omitempty"`
	Eci    *wrapperspb.Int32Value `protobuf:"bytes,4,opt,name=eci,proto3" json:"eci,omitempty"`
	Earfcn *wrapperspb.Int32Value `protobuf:"bytes,5,opt,name=earfcn,proto3" json:"earfcn,omitempty"`
	Pci    *wrapperspb.Int32Value `protobuf:"bytes,6,opt,name=pci,proto3" json:"pci,omitempty"`
}

func (x *CellIdentityLte) Reset() {
	*x = CellIdentityLte{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_craxiom_messaging_phone_state_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellIdentityLte) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellIdentityLte) ProtoMessage() {}

func (x *CellIdentityLte) ProtoReflect() protoreflect.Message {
	mi := &file_com_craxiom_messaging_phone_state_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellIdentityLte.ProtoReflect.Descriptor instead.
func (*CellIdentityLte) Descriptor() ([]byte, []int) {
	return file_com_craxiom_messaging_phone_state_proto_rawDescGZIP(), []int{6}
}

func (x *CellIdentityLte) GetMcc() *wrapperspb.Int32Value {
	if x != nil {
		return x.Mcc
	}
	return nil
}

func (x *CellIdentityLte) GetMnc() *wrapperspb.Int32Value {
	if x != nil {
		return x.Mnc
	}
	return nil
}

func (x *CellIdentityLte) GetTac() *wrapperspb.Int32Value {
	if x != nil {
		return x.Tac
	}
	return nil
}

func (x *CellIdentityLte) GetEci() *wrapperspb.Int32Value {
	if x != nil {
		return x.Eci
	}
	return nil
}

func (x *CellIdentityLte) GetEarfcn() *wrapperspb.Int32Value {
	if x != nil {
		return x.Earfcn
	}
	return nil
}

func (x *CellIdentityLte) GetPci() *wrapperspb.Int32Value {
	if x != nil {
		return x.Pci
	}
	return nil
}

type CellIdentityNr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mcc    *wrapperspb.Int32Value `protobuf:"bytes,1,opt,name=mcc,proto3" json:"mcc,omitempty"`
	Mnc    *wrapperspb.Int32Value `protobuf:"bytes,2,opt,name=mnc,proto3" json:"mnc,omitempty"`
	Tac    *wrapperspb.Int32Value `protobuf:"bytes,3,opt,name=tac,proto3" json:"tac,omitempty"`
	Nci    *wrapperspb.Int64Value `protobuf:"bytes,4,opt,name=nci,proto3" json:"nci,omitempty"`
	Narfcn *wrapperspb.Int32Value `protobuf:"bytes,5,opt,name=narfcn,proto3" json:"narfcn,omitempty"`
	Pci    *wrapperspb.Int32Value `protobuf:"bytes,6,opt,name=pci,proto3" json:"pci,omitempty"`
}

func (x *CellIdentityNr) Reset() {
	*x = CellIdentityNr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_craxiom_messaging_phone_state_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellIdentityNr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellIdentityNr) ProtoMessage() {}

func (x *CellIdentityNr) ProtoReflect() protoreflect.Message {
	mi := &file_com_craxiom_messaging_phone_state_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellIdentityNr.ProtoReflect.Descriptor instead.
func (*CellIdentityNr) Descriptor() ([]byte, []int) {
	return file_com_craxiom_messaging_phone_state_proto_rawDescGZIP(), []int{7}
}

func (x *CellIdentityNr) GetMcc() *wrapperspb.Int32Value {
	if x != nil {
		return x.Mcc
	}
	return nil
}

func (x *CellIdentityNr) GetMnc() *wrapperspb.Int32Value {
	if x != nil {
		return x.Mnc
	}
	return nil
}

func (x *CellIdentityNr) GetTac() *wrapperspb.Int32Value {
	if x != nil {
		return x.Tac
	}
	return nil
}

func (x *CellIdentityNr) GetNci() *wrapperspb.Int64Value {
	if x != nil {
		return x.Nci
	}
	return nil
}

func (x *CellIdentityNr) GetNarfcn() *wrapperspb.Int32Value {
	if x != nil {
		return x.Narfcn
	}
	return nil
}

func (x *CellIdentityNr) GetPci() *wrapperspb.Int32Value {
	if x != nil {
		return x.Pci
	}
	return nil
}

var File_com_craxiom_messaging_phone_state_proto protoreflect.FileDescriptor

var file_com_craxiom_messaging_phone_state_proto_rawDesc = []byte{
	0x0a, 0x27, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x72, 0x61, 0x78, 0x69, 0x6f, 0x6d, 0x2f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x15, 0x63, 0x6f, 0x6d, 0x2e, 0x63,
	0x72, 0x61, 0x78, 0x69, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67,
	0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x34, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x72, 0x61, 0x78, 0x69, 0x6f, 0x6d, 0x2f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3f, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x72, 0x61, 0x78,
	0x69, 0x6f, 0x6d, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2f, 0x70, 0x68,
	0x6f, 0x6e, 0x65, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x74, 0x79, 0x70, 0x65, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x39, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x72, 0x61,
	0x78, 0x69, 0x6f, 0x6d, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2f, 0x70,
	0x68, 0x6f, 0x6e, 0x65, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x73, 0x69, 0x6d, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x73, 0x69, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x83, 0x01, 0x0a, 0x0a, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x39, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x63, 0x72, 0x61, 0x78, 0x69, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x69, 0x6e, 0x67, 0x2e, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xf0, 0x05, 0x0a, 0x0e, 0x50, 0x68, 0x6f,
	0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2e, 0x0a, 0x12, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c,
	0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6c,
	0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69,
	0x74, 0x75, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67,
	0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x61, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x22, 0x0a, 0x0c, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x32,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x68, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x14, 0x0a,
	0x05, 0x70, 0x69, 0x74, 0x63, 0x68, 0x18, 0x33, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x70, 0x69,
	0x74, 0x63, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x6c, 0x18, 0x34, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x4f, 0x66, 0x56, 0x69, 0x65, 0x77, 0x18, 0x35, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x4f, 0x66, 0x56, 0x69, 0x65, 0x77, 0x12, 0x30, 0x0a, 0x13, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x72, 0x53, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x18, 0x36, 0x20, 0x01, 0x28, 0x02, 0x52, 0x13, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72,
	0x53, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x73,
	0x70, 0x65, 0x65, 0x64, 0x18, 0x37, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x73, 0x70, 0x65, 0x65,
	0x64, 0x12, 0x4f, 0x0a, 0x08, 0x73, 0x69, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x72, 0x61, 0x78, 0x69, 0x6f,
	0x6d, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x68, 0x6f, 0x6e,
	0x65, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x73, 0x69, 0x6d, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e,
	0x53, 0x69, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x08, 0x73, 0x69, 0x6d, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x69, 0x6d, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x69, 0x6d, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x12, 0x68, 0x0a, 0x17, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x72, 0x61, 0x78,
	0x69, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x17, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a,
	0x0a, 0x08, 0x61, 0x63, 0x63, 0x75, 0x72, 0x61, 0x63, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x61, 0x63, 0x63, 0x75, 0x72, 0x61, 0x63, 0x79, 0x12, 0x2f, 0x0a, 0x04, 0x73, 0x6c,
	0x6f, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x22, 0x83, 0x06, 0x0a, 0x17,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x47, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x72,
	0x61, 0x78, 0x69, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e,
	0x70, 0x68, 0x6f, 0x6e, 0x65, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x2e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x12, 0x73, 0x0a, 0x17, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x54, 0x65, 0x63, 0x68, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x39, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x72, 0x61, 0x78, 0x69, 0x6f, 0x6d, 0x2e,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x52, 0x17, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x65, 0x63, 0x68, 0x6e,
	0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x12, 0x34, 0x0a, 0x07, 0x72, 0x6f, 0x61, 0x6d, 0x69, 0x6e, 0x67,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x07, 0x72, 0x6f, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x12, 0x3d, 0x0a, 0x0b, 0x72,
	0x65, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x61, 0x75, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x72,
	0x65, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x61, 0x75, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x0f, 0x63, 0x65,
	0x6c, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x47, 0x73, 0x6d, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x72, 0x61, 0x78, 0x69, 0x6f,
	0x6d, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x65, 0x6c, 0x6c,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x47, 0x73, 0x6d, 0x48, 0x00, 0x52, 0x0f, 0x63,
	0x65, 0x6c, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x47, 0x73, 0x6d, 0x12, 0x55,
	0x0a, 0x10, 0x63, 0x65, 0x6c, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x43, 0x64,
	0x6d, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63,
	0x72, 0x61, 0x78, 0x69, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67,
	0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x43, 0x64, 0x6d,
	0x61, 0x48, 0x00, 0x52, 0x10, 0x63, 0x65, 0x6c, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x43, 0x64, 0x6d, 0x61, 0x12, 0x55, 0x0a, 0x10, 0x63, 0x65, 0x6c, 0x6c, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x55, 0x6d, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x72, 0x61, 0x78, 0x69, 0x6f, 0x6d, 0x2e, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x55, 0x6d, 0x74, 0x73, 0x48, 0x00, 0x52, 0x10, 0x63, 0x65, 0x6c, 0x6c,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x55, 0x6d, 0x74, 0x73, 0x12, 0x52, 0x0a, 0x0f,
	0x63, 0x65, 0x6c, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4c, 0x74, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x72, 0x61, 0x78,
	0x69, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x65,
	0x6c, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4c, 0x74, 0x65, 0x48, 0x00, 0x52,
	0x0f, 0x63, 0x65, 0x6c, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4c, 0x74, 0x65,
	0x12, 0x4f, 0x0a, 0x0e, 0x63, 0x65, 0x6c, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x4e, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63,
	0x72, 0x61, 0x78, 0x69, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67,
	0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4e, 0x72, 0x48,
	0x00, 0x52, 0x0e, 0x63, 0x65, 0x6c, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4e,
	0x72, 0x42, 0x0e, 0x0a, 0x0c, 0x63, 0x65, 0x6c, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x22, 0xaf, 0x02, 0x0a, 0x0f, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x47, 0x73, 0x6d, 0x12, 0x2d, 0x0a, 0x03, 0x6d, 0x63, 0x63, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x03, 0x6d, 0x63, 0x63, 0x12, 0x2d, 0x0a, 0x03, 0x6d, 0x6e, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03,
	0x6d, 0x6e, 0x63, 0x12, 0x2d, 0x0a, 0x03, 0x6c, 0x61, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x6c,
	0x61, 0x63, 0x12, 0x2b, 0x0a, 0x02, 0x63, 0x69, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x02, 0x63, 0x69, 0x12,
	0x31, 0x0a, 0x05, 0x61, 0x72, 0x66, 0x63, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x61, 0x72, 0x66,
	0x63, 0x6e, 0x12, 0x2f, 0x0a, 0x04, 0x62, 0x73, 0x69, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x62,
	0x73, 0x69, 0x63, 0x22, 0xa1, 0x01, 0x0a, 0x10, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x43, 0x64, 0x6d, 0x61, 0x12, 0x2d, 0x0a, 0x03, 0x73, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x03, 0x73, 0x69, 0x64, 0x12, 0x2d, 0x0a, 0x03, 0x6e, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x03, 0x6e, 0x69, 0x64, 0x12, 0x2f, 0x0a, 0x04, 0x62, 0x73, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x04, 0x62, 0x73, 0x69, 0x64, 0x22, 0xb2, 0x02, 0x0a, 0x10, 0x43, 0x65, 0x6c, 0x6c,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x55, 0x6d, 0x74, 0x73, 0x12, 0x2d, 0x0a, 0x03,
	0x6d, 0x63, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x6d, 0x63, 0x63, 0x12, 0x2d, 0x0a, 0x03, 0x6d,
	0x6e, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x6d, 0x6e, 0x63, 0x12, 0x2d, 0x0a, 0x03, 0x6c, 0x61,
	0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x6c, 0x61, 0x63, 0x12, 0x2d, 0x0a, 0x03, 0x63, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x03, 0x63, 0x69, 0x64, 0x12, 0x33, 0x0a, 0x06, 0x75, 0x61, 0x72, 0x66,
	0x63, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x75, 0x61, 0x72, 0x66, 0x63, 0x6e, 0x12, 0x2d, 0x0a,
	0x03, 0x70, 0x73, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74,
	0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x70, 0x73, 0x63, 0x22, 0xb1, 0x02, 0x0a,
	0x0f, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4c, 0x74, 0x65,
	0x12, 0x2d, 0x0a, 0x03, 0x6d, 0x63, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x6d, 0x63, 0x63, 0x12,
	0x2d, 0x0a, 0x03, 0x6d, 0x6e, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x6d, 0x6e, 0x63, 0x12, 0x2d,
	0x0a, 0x03, 0x74, 0x61, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x74, 0x61, 0x63, 0x12, 0x2d, 0x0a,
	0x03, 0x65, 0x63, 0x69, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74,
	0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x65, 0x63, 0x69, 0x12, 0x33, 0x0a, 0x06,
	0x65, 0x61, 0x72, 0x66, 0x63, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x65, 0x61, 0x72, 0x66, 0x63,
	0x6e, 0x12, 0x2d, 0x0a, 0x03, 0x70, 0x63, 0x69, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x70, 0x63, 0x69,
	0x22, 0xb0, 0x02, 0x0a, 0x0e, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x4e, 0x72, 0x12, 0x2d, 0x0a, 0x03, 0x6d, 0x63, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x6d,
	0x63, 0x63, 0x12, 0x2d, 0x0a, 0x03, 0x6d, 0x6e, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x6d, 0x6e,
	0x63, 0x12, 0x2d, 0x0a, 0x03, 0x74, 0x61, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x74, 0x61, 0x63,
	0x12, 0x2d, 0x0a, 0x03, 0x6e, 0x63, 0x69, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x6e, 0x63, 0x69, 0x12,
	0x33, 0x0a, 0x06, 0x6e, 0x61, 0x72, 0x66, 0x63, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x6e, 0x61,
	0x72, 0x66, 0x63, 0x6e, 0x12, 0x2d, 0x0a, 0x03, 0x70, 0x63, 0x69, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03,
	0x70, 0x63, 0x69, 0x42, 0x30, 0x0a, 0x15, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x72, 0x61, 0x78, 0x69,
	0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x50, 0x01, 0x5a, 0x15,
	0x63, 0x72, 0x61, 0x78, 0x69, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x69, 0x6e, 0x67, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_com_craxiom_messaging_phone_state_proto_rawDescOnce sync.Once
	file_com_craxiom_messaging_phone_state_proto_rawDescData = file_com_craxiom_messaging_phone_state_proto_rawDesc
)

func file_com_craxiom_messaging_phone_state_proto_rawDescGZIP() []byte {
	file_com_craxiom_messaging_phone_state_proto_rawDescOnce.Do(func() {
		file_com_craxiom_messaging_phone_state_proto_rawDescData = protoimpl.X.CompressGZIP(file_com_craxiom_messaging_phone_state_proto_rawDescData)
	})
	return file_com_craxiom_messaging_phone_state_proto_rawDescData
}

var file_com_craxiom_messaging_phone_state_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_com_craxiom_messaging_phone_state_proto_goTypes = []any{
	(*PhoneState)(nil),              // 0: com.craxiom.messaging.PhoneState
	(*PhoneStateData)(nil),          // 1: com.craxiom.messaging.PhoneStateData
	(*NetworkRegistrationInfo)(nil), // 2: com.craxiom.messaging.NetworkRegistrationInfo
	(*CellIdentityGsm)(nil),         // 3: com.craxiom.messaging.CellIdentityGsm
	(*CellIdentityCdma)(nil),        // 4: com.craxiom.messaging.CellIdentityCdma
	(*CellIdentityUmts)(nil),        // 5: com.craxiom.messaging.CellIdentityUmts
	(*CellIdentityLte)(nil),         // 6: com.craxiom.messaging.CellIdentityLte
	(*CellIdentityNr)(nil),          // 7: com.craxiom.messaging.CellIdentityNr
	(SimState)(0),                   // 8: com.craxiom.messaging.phonestate.simstate.SimState
	(*wrapperspb.Int32Value)(nil),   // 9: google.protobuf.Int32Value
	(Domain)(0),                     // 10: com.craxiom.messaging.phonestate.domain.Domain
	(NetworkType)(0),                // 11: com.craxiom.messaging.phonestate.networktype.NetworkType
	(*wrapperspb.BoolValue)(nil),    // 12: google.protobuf.BoolValue
	(*wrapperspb.Int64Value)(nil),   // 13: google.protobuf.Int64Value
}
var file_com_craxiom_messaging_phone_state_proto_depIdxs = []int32{
	1,  // 0: com.craxiom.messaging.PhoneState.data:type_name -> com.craxiom.messaging.PhoneStateData
	8,  // 1: com.craxiom.messaging.PhoneStateData.simState:type_name -> com.craxiom.messaging.phonestate.simstate.SimState
	2,  // 2: com.craxiom.messaging.PhoneStateData.networkRegistrationInfo:type_name -> com.craxiom.messaging.NetworkRegistrationInfo
	9,  // 3: com.craxiom.messaging.PhoneStateData.slot:type_name -> google.protobuf.Int32Value
	10, // 4: com.craxiom.messaging.NetworkRegistrationInfo.domain:type_name -> com.craxiom.messaging.phonestate.domain.Domain
	11, // 5: com.craxiom.messaging.NetworkRegistrationInfo.accessNetworkTechnology:type_name -> com.craxiom.messaging.phonestate.networktype.NetworkType
	12, // 6: com.craxiom.messaging.NetworkRegistrationInfo.roaming:type_name -> google.protobuf.BoolValue
	9,  // 7: com.craxiom.messaging.NetworkRegistrationInfo.rejectCause:type_name -> google.protobuf.Int32Value
	3,  // 8: com.craxiom.messaging.NetworkRegistrationInfo.cellIdentityGsm:type_name -> com.craxiom.messaging.CellIdentityGsm
	4,  // 9: com.craxiom.messaging.NetworkRegistrationInfo.cellIdentityCdma:type_name -> com.craxiom.messaging.CellIdentityCdma
	5,  // 10: com.craxiom.messaging.NetworkRegistrationInfo.cellIdentityUmts:type_name -> com.craxiom.messaging.CellIdentityUmts
	6,  // 11: com.craxiom.messaging.NetworkRegistrationInfo.cellIdentityLte:type_name -> com.craxiom.messaging.CellIdentityLte
	7,  // 12: com.craxiom.messaging.NetworkRegistrationInfo.cellIdentityNr:type_name -> com.craxiom.messaging.CellIdentityNr
	9,  // 13: com.craxiom.messaging.CellIdentityGsm.mcc:type_name -> google.protobuf.Int32Value
	9,  // 14: com.craxiom.messaging.CellIdentityGsm.mnc:type_name -> google.protobuf.Int32Value
	9,  // 15: com.craxiom.messaging.CellIdentityGsm.lac:type_name -> google.protobuf.Int32Value
	9,  // 16: com.craxiom.messaging.CellIdentityGsm.ci:type_name -> google.protobuf.Int32Value
	9,  // 17: com.craxiom.messaging.CellIdentityGsm.arfcn:type_name -> google.protobuf.Int32Value
	9,  // 18: com.craxiom.messaging.CellIdentityGsm.bsic:type_name -> google.protobuf.Int32Value
	9,  // 19: com.craxiom.messaging.CellIdentityCdma.sid:type_name -> google.protobuf.Int32Value
	9,  // 20: com.craxiom.messaging.CellIdentityCdma.nid:type_name -> google.protobuf.Int32Value
	9,  // 21: com.craxiom.messaging.CellIdentityCdma.bsid:type_name -> google.protobuf.Int32Value
	9,  // 22: com.craxiom.messaging.CellIdentityUmts.mcc:type_name -> google.protobuf.Int32Value
	9,  // 23: com.craxiom.messaging.CellIdentityUmts.mnc:type_name -> google.protobuf.Int32Value
	9,  // 24: com.craxiom.messaging.CellIdentityUmts.lac:type_name -> google.protobuf.Int32Value
	9,  // 25: com.craxiom.messaging.CellIdentityUmts.cid:type_name -> google.protobuf.Int32Value
	9,  // 26: com.craxiom.messaging.CellIdentityUmts.uarfcn:type_name -> google.protobuf.Int32Value
	9,  // 27: com.craxiom.messaging.CellIdentityUmts.psc:type_name -> google.protobuf.Int32Value
	9,  // 28: com.craxiom.messaging.CellIdentityLte.mcc:type_name -> google.protobuf.Int32Value
	9,  // 29: com.craxiom.messaging.CellIdentityLte.mnc:type_name -> google.protobuf.Int32Value
	9,  // 30: com.craxiom.messaging.CellIdentityLte.tac:type_name -> google.protobuf.Int32Value
	9,  // 31: com.craxiom.messaging.CellIdentityLte.eci:type_name -> google.protobuf.Int32Value
	9,  // 32: com.craxiom.messaging.CellIdentityLte.earfcn:type_name -> google.protobuf.Int32Value
	9,  // 33: com.craxiom.messaging.CellIdentityLte.pci:type_name -> google.protobuf.Int32Value
	9,  // 34: com.craxiom.messaging.CellIdentityNr.mcc:type_name -> google.protobuf.Int32Value
	9,  // 35: com.craxiom.messaging.CellIdentityNr.mnc:type_name -> google.protobuf.Int32Value
	9,  // 36: com.craxiom.messaging.CellIdentityNr.tac:type_name -> google.protobuf.Int32Value
	13, // 37: com.craxiom.messaging.CellIdentityNr.nci:type_name -> google.protobuf.Int64Value
	9,  // 38: com.craxiom.messaging.CellIdentityNr.narfcn:type_name -> google.protobuf.Int32Value
	9,  // 39: com.craxiom.messaging.CellIdentityNr.pci:type_name -> google.protobuf.Int32Value
	40, // [40:40] is the sub-list for method output_type
	40, // [40:40] is the sub-list for method input_type
	40, // [40:40] is the sub-list for extension type_name
	40, // [40:40] is the sub-list for extension extendee
	0,  // [0:40] is the sub-list for field type_name
}

func init() { file_com_craxiom_messaging_phone_state_proto_init() }
func file_com_craxiom_messaging_phone_state_proto_init() {
	if File_com_craxiom_messaging_phone_state_proto != nil {
		return
	}
	file_com_craxiom_messaging_phonestate_domain_domain_proto_init()
	file_com_craxiom_messaging_phonestate_networktype_network_type_proto_init()
	file_com_craxiom_messaging_phonestate_simstate_sim_state_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_com_craxiom_messaging_phone_state_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*PhoneState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_craxiom_messaging_phone_state_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*PhoneStateData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_craxiom_messaging_phone_state_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*NetworkRegistrationInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_craxiom_messaging_phone_state_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*CellIdentityGsm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_craxiom_messaging_phone_state_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*CellIdentityCdma); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_craxiom_messaging_phone_state_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*CellIdentityUmts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_craxiom_messaging_phone_state_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*CellIdentityLte); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_craxiom_messaging_phone_state_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*CellIdentityNr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_com_craxiom_messaging_phone_state_proto_msgTypes[2].OneofWrappers = []any{
		(*NetworkRegistrationInfo_CellIdentityGsm)(nil),
		(*NetworkRegistrationInfo_CellIdentityCdma)(nil),
		(*NetworkRegistrationInfo_CellIdentityUmts)(nil),
		(*NetworkRegistrationInfo_CellIdentityLte)(nil),
		(*NetworkRegistrationInfo_CellIdentityNr)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_com_craxiom_messaging_phone_state_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_com_craxiom_messaging_phone_state_proto_goTypes,
		DependencyIndexes: file_com_craxiom_messaging_phone_state_proto_depIdxs,
		MessageInfos:      file_com_craxiom_messaging_phone_state_proto_msgTypes,
	}.Build()
	File_com_craxiom_messaging_phone_state_proto = out.File
	file_com_craxiom_messaging_phone_state_proto_rawDesc = nil
	file_com_craxiom_messaging_phone_state_proto_goTypes = nil
	file_com_craxiom_messaging_phone_state_proto_depIdxs = nil
}

//*
// Defines the connection handshake sequence for validating a connection to a Network Survey Messaging server.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.26.1
// source: com/craxiom/messaging/grpc/connection_handshake.proto

package messaging

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ConnectionHandshake_StartConnection_FullMethodName = "/com.craxiom.messaging.grpc.ConnectionHandshake/StartConnection"
)

// ConnectionHandshakeClient is the client API for ConnectionHandshake service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConnectionHandshakeClient interface {
	StartConnection(ctx context.Context, in *ConnectionRequest, opts ...grpc.CallOption) (*ConnectionReply, error)
}

type connectionHandshakeClient struct {
	cc grpc.ClientConnInterface
}

func NewConnectionHandshakeClient(cc grpc.ClientConnInterface) ConnectionHandshakeClient {
	return &connectionHandshakeClient{cc}
}

func (c *connectionHandshakeClient) StartConnection(ctx context.Context, in *ConnectionRequest, opts ...grpc.CallOption) (*ConnectionReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ConnectionReply)
	err := c.cc.Invoke(ctx, ConnectionHandshake_StartConnection_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConnectionHandshakeServer is the server API for ConnectionHandshake service.
// All implementations must embed UnimplementedConnectionHandshakeServer
// for forward compatibility.
type ConnectionHandshakeServer interface {
	StartConnection(context.Context, *ConnectionRequest) (*ConnectionReply, error)
	mustEmbedUnimplementedConnectionHandshakeServer()
}

// UnimplementedConnectionHandshakeServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedConnectionHandshakeServer struct{}

func (UnimplementedConnectionHandshakeServer) StartConnection(context.Context, *ConnectionRequest) (*ConnectionReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartConnection not implemented")
}
func (UnimplementedConnectionHandshakeServer) mustEmbedUnimplementedConnectionHandshakeServer() {}
func (UnimplementedConnectionHandshakeServer) testEmbeddedByValue()                             {}

// UnsafeConnectionHandshakeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConnectionHandshakeServer will
// result in compilation errors.
type UnsafeConnectionHandshakeServer interface {
	mustEmbedUnimplementedConnectionHandshakeServer()
}

func RegisterConnectionHandshakeServer(s grpc.ServiceRegistrar, srv ConnectionHandshakeServer) {
	// If the following call pancis, it indicates UnimplementedConnectionHandshakeServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ConnectionHandshake_ServiceDesc, srv)
}

func _ConnectionHandshake_StartConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectionHandshakeServer).StartConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConnectionHandshake_StartConnection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectionHandshakeServer).StartConnection(ctx, req.(*ConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ConnectionHandshake_ServiceDesc is the grpc.ServiceDesc for ConnectionHandshake service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConnectionHandshake_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.craxiom.messaging.grpc.ConnectionHandshake",
	HandlerType: (*ConnectionHandshakeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartConnection",
			Handler:    _ConnectionHandshake_StartConnection_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "com/craxiom/messaging/grpc/connection_handshake.proto",
}
